<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MediQuick | Patient Profile</title>
    <link rel="shortcut icon" href="favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
         @import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100..900;1,100..900&display=swap');

        :root {
            --blue: #0188df;
            --black: #444d53;
            --white: #fff;
        }

        * {
            font-family: "Roboto", sans-serif;
            margin: 0;
            padding: 0;
            text-decoration: none;
            outline: none;
            box-sizing: border-box;
            transition: all linear .2s;
        }

        html {
            font-size: 62.5%;
            overflow-x: hidden;
            scroll-behavior: smooth;
        }

        body {
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }

        header {
            width: 96%;
            background: var(--white);
            position: fixed;
            top: 2rem;
            left: 50%;
            transform: translate(-50%);
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1rem 2rem;
            z-index: 1000;
        }

        header a {
            color: var(--black);
        }

        header a:hover {
            color: var(--blue);
        }

        header .logo {
            font-size: 3rem;
        }

        header .logo span {
            color: var(--blue);
        }

        header .navbar ul {
            display: flex;
            align-items: center;
            justify-content: space-between;
            list-style: none;
        }

        header .navbar ul li {
            margin: 0 1rem;
        }

        header .navbar ul li a {
            font-size: 2rem;
            color: var(--black);
        }

        header .navbar ul li a:hover {
            color: var(--blue);
        }

        header .fa-bars {
            font-size: 3rem;
            color: var(--blue);
            cursor: pointer;
            display: none;
        }

        header .fa-times {
            transform: rotate(180deg);
        }

        .header-active {
            top: 0;
            width: 100%;
            box-shadow: .1rem .3rem rgba(0, 0, 0, .3);
        }

        .patient-profile {
            flex: 1;
            padding: 20px;
            background-color: white;
            margin: 100px 20px 20px 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .profile-container {
            max-width: 800px;
            margin: auto;
        }

        .profile-header {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
            flex-direction: column;
            text-align: center;
        }

        .profile-picture img {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            margin-right: 20px;
        }

        .profile-info h1 {
            margin: 0;
            font-size: 2.4rem;
        }

        .profile-info p {
            margin: 5px 0;
            color: #0188df;
            font-size: 1.6rem;
        }

        .appointment-history,
        .future-appointments {
            margin-top: 30px;
            background-color: #fff;
        }

        .appointment-history h3,
        .future-appointments h3 {
            margin-bottom: 10px;
        }

        .appointment-list {
            list-style: none;
            padding: 0;
            background-color: #fff;
        }

        .appointment-list li {
            background: #adbbc5;
            padding: 10px;
            margin: 5px 0;
            border-radius: 5px;
            font-size: 1.5rem;
        }

        .footer {
            background: var(--black);
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            padding: 2rem 0;
            margin-top: auto;
        }

        .footer .box {
            width: 30rem;
            margin: 2rem;
            text-align: center;
        }

        .footer .box:nth-child() {
            text-align: left;
        }

        .footer .box .logo {
            padding: 2rem 0;
            font-size: 3rem;
            color: var(--white);
        }

        .footer .box .logo:hover {
            color: var(--blue);
        }

        .footer .box .logo span {
            color: var(--blue);
        }

        .footer .box p {
            font-size: 1.5rem;
            color: var(--white);
        }

        .footer .box a {
            color: var(--white);
            font-size: 2rem;
            display: block;
            padding: .2rem 0;
        }

        .footer .box a:hover {
            text-decoration: underline;
        }

        .footer .credit {
            width: 85%;
            padding-top: 1rem;
            font-size: 2rem;
            color: var(--white);
            text-align: center;
            border-top: .2rem solid var(--white);
        }

        .footer .credit span {
            color: var(--blue);
            text-decoration: underline;
            letter-spacing: .5rem;
        }

        .close-btn {
            position: absolute;
            top: 15%;
            left: 5%;
            font-size: 24px;
            font-weight: bold;
            cursor: pointer;
            background: rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            padding: 5px 10px;
            transition: 0.3s;
        }

        .close-btn:hover {
            background: rgba(0, 0, 0, 0.3);
            color: white;
        }

        .button {
            height: 3.5rem;
            width: 15rem;
            background: var(--black);
            color: var(--white);
            font-size: 1.7rem;
            text-transform: capitalize;
            border-radius: .5rem;
            cursor: pointer;
            margin: 1rem 0;
            border: .1rem solid var(--blue);
            margin-left: 45%;
        }

        .button:hover {
            border: .1rem solid var(--blue);
            background: var(--white);
            color: var(--blue);
            letter-spacing: .2rem;
        }

        /* Status colors */
.status-completed {
    color: green;
}
.status-cancelled {
    color: red;
}
.status-confirmed {
    color: green;
}
.status-pending {
    color: orange;
}

/* Cancel button */
.cancel-btn {
    background: #ff4444; 
    color: white; 
    border: none; 
    padding: 3px 8px; 
    border-radius: 3px; 
    cursor: pointer;
}
.cancel-btn:hover {
    background: #cc0000;
}
        @media (max-width:768px) {
            html {
                font-size: 55%;
            }

            header .fa-bars {
                display: block;
            }

            header .navbar {
                position: fixed;
                top: -100rem;
                left: 0;
                width: 100%;
                background: var(--white);
                opacity: 0;
            }

            header .navbar ul {
                flex-flow: column;
                padding: 2rem 0;
            }

            header .navbar ul li {
                margin: 1rem 0;
                width: 100%;
                text-align: center;
            }

            header .navbar ul li a {
                font-size: 2rem;
                display: block;
            }

            header .nav-toggle {
                top: 5.5rem;
                opacity: 1;
            }

            .profile-header {
                flex-direction: column;
                text-align: center;
            }

            .profile-picture img {
                margin-right: 0;
                margin-bottom: 10px;
            }

            .patient-profile .button {
                margin-left: 32.5%;
            }
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.4);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 600px;
            border-radius: 8px;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover {
            color: black;
        }

        .chat-messages {
            height: 300px;
            overflow-y: auto;
            border: 1px solid #ddd;
            padding: 10px;
            margin: 10px 0;
            border-radius: 4px;
        }

        .chat-input {
            display: flex;
            gap: 10px;
        }

        .chat-input input {
            flex: 1;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .chat-input button {
            padding: 8px 16px;
            background-color: var(--blue);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .chat-btn {
            background-color: var(--blue);
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 5px;
        }

        .message {
            margin: 5px 0;
            padding: 8px;
            border-radius: 4px;
            max-width: 80%;
        }

        .message.sent {
            background-color: var(--blue);
            color: white;
            margin-left: auto;
        }

        .message.received {
            background-color: #f0f0f0;
            margin-right: auto;
        }

        .loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid var(--blue);
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .error-message {
            color: red;
            text-align: center;
            margin: 20px 0;
        }
        
        .retry-btn {
            background-color: var(--blue);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            margin: 10px auto;
            display: block;
        }
    </style>
</head>

<body>
    <header>
        <a href="#" class="logo"><span>M</span>edi<span>Q</span>uick</a>
        <nav class="navbar">
            <ul>
                <li><a href="/">Home</a></li>
                <li><a href="/about">About Us</a></li>
                <li><a href="/faqs">FAQs</a></li>
                <li><a href="/blogs">Blog</a></li>
                <li><a href="/contact">Contact Us</a></li>
                <li><a href="/patient/form">LogOut</a></li>
            </ul>
        </nav>
        <div class="fas fa-bars"></div>
    </header>

    <section class="patient-profile">
        <!-- Close Button -->
        <div class="close-btn" onclick="closeProfile()">
            <i class="fas fa-times"></i>
        </div>

        <div class="profile-container">
            <div class="profile-header">
                <div class="profile-picture">
                    <img src="https://icons.veryicon.com/png/o/healthcate-medical/two-color-icon-of-simple-medical-project/patient-4.png" alt="Patient Profile Picture">
                </div>
                <div class="profile-info">
                    <h1 id="patientName"></h1>
                    <p id="patientEmail"></p>
                    <p id="patientMobile"></p>
                    <p id="patientAddress"></p>
                </div>
            </div>

            <div class="appointment-history">
                <h2 style="color: var(--blue); font-size: 2rem;">Previous Appointments</h2>
                <div id="previousAppointments">
                    <div class="loader"></div>
                </div>
            </div>
            
            <div class="future-appointments">
                <h2 style="color: var(--blue); font-size: 2rem;">Upcoming Appointments</h2>
                <div id="upcomingAppointments">
                    <div class="loader"></div>
                </div>
            </div>
            
            <a href="/patient/edit-profile"><button class="button">Edit Profile</button></a>
        </div>
    </section>

    <%- include('partials/footer') %>

    <!-- jquery cd link -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

    <script>
        // Display patient data
        document.getElementById('patientName').textContent = '<%= patient.name %>';
        document.getElementById('patientEmail').textContent = 'Email: <%= patient.email %>';
        document.getElementById('patientMobile').textContent = 'Mobile: <%= patient.mobile %>';
        document.getElementById('patientAddress').textContent = 'Address: <%= patient.address %>';

        // Function to fetch appointments
        async function fetchAppointments(type) {
            const container = document.getElementById(`${type}Appointments`);
            
            try {
                const response = await fetch(`/patient/api/patient/appointments/${type}`);
                
                if (!response.ok) {
                    throw new Error(`Failed to fetch ${type} appointments`);
                }
                
                const appointments = await response.json();
                
                if (appointments.length === 0) {
                    container.innerHTML = `<p>No ${type} appointments found.</p>`;
                    return;
                }
                
                // Create HTML for appointments
                const appointmentsHTML = `
                    <ul class="appointment-list">
                        ${appointments.map(appointment => `
                            <li>
                                <strong>Dr. ${appointment.doctorName}</strong> (${appointment.specialization})<br>
                                <strong>Date:</strong> ${appointment.date} at ${appointment.time}<br>
                                <strong>Type:</strong> ${appointment.type}<br>
                                <strong>Status:</strong> <span class="status-${appointment.status.toLowerCase()}">
                                    ${appointment.status}
                                </span>
                                ${appointment.notes ? `<br><strong>Notes:</strong> ${appointment.notes}` : ''}
                                ${type === 'upcoming' ? `
                                    <div style="margin-top: 5px;">
                                        ${appointment.status === 'confirmed' ? `
                                            <button onclick="openChat('${appointment.id}')" class="chat-btn">
                                                Chat with Doctor
                                            </button>
                                        ` : ''}
                                        <button onclick="cancelAppointment('${appointment.id}')" 
                                            class="cancel-btn">
                                            Cancel
                                        </button>
                                    </div>
                                ` : ''}
                            </li>
                        `).join('')}
                    </ul>
                `;
                
                container.innerHTML = appointmentsHTML;
            } catch (error) {
                console.error(`Error fetching ${type} appointments:`, error);
                container.innerHTML = `
                    <div class="error-message">
                        <p>Failed to load ${type} appointments.</p>
                        <button class="retry-btn" onclick="fetchAppointments('${type}')">Retry</button>
                    </div>
                `;
            }
        }

        // Fetch appointments when page loads
        document.addEventListener('DOMContentLoaded', () => {
            fetchAppointments('previous');
            fetchAppointments('upcoming');
        });

        // Rest of your existing JavaScript functions...
        // function cancelAppointment(appointmentId) {
        //     if (confirm('Are you sure you want to cancel this appointment?')) {
        //         fetch(`/appointment/${appointmentId}`, {
        //             method: 'PATCH',
        //             headers: {
        //                 'Content-Type': 'application/json',
        //             },
        //             body: JSON.stringify({ status: 'cancelled' })
        //         })
        //         .then(response => response.json())
        //         .then(data => {
        //             if (data.message) {
        //                 alert('Appointment cancelled successfully');
        //                 // Refresh the appointments
        //                 fetchAppointments('upcoming');
        //             } else {
        //                 alert('Failed to cancel appointment');
        //             }
        //         })
        //         .catch(error => {
        //             console.error('Error:', error);
        //             alert('An error occurred while cancelling the appointment');
        //         });
        //     }
        // }
        function cancelAppointment(appointmentId) {
    if (confirm('Are you sure you want to cancel this appointment?')) {
        fetch(`/appointment/patient/${appointmentId}/cancel`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
            },
            credentials: 'include' // Important for session cookies
        })
        .then(response => {
            if (!response.ok) {
                return response.json().then(errorData => {
                    throw new Error(errorData.error || errorData.details || 'Failed to cancel appointment');
                });
            }
            return response.json();
        })
        .then(data => {
            if (data.message) {
                alert('Appointment cancelled successfully');
                // Refresh the appointments
                fetchAppointments('upcoming');
                fetchAppointments('previous'); // Also refresh previous as this is now a past appointment
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert(error.message || 'An error occurred while cancelling the appointment');
        });
    }
}

        function closeProfile() {
            window.location.href = "/patient/dashboard";
        }
    </script>

    <!-- Chat modal code remains the same -->
    <div id="chatModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Chat with Doctor</h2>
            <div id="chatMessages" class="chat-messages"></div>
            <div class="chat-input">
                <input type="text" id="messageInput" placeholder="Type your message...">
                <button onclick="sendMessage()">Send</button>
            </div>
        </div>
    </div>

    <script>
        // Chat functionality remains the same
        let currentAppointmentId = null;
        const modal = document.getElementById('chatModal');
        const closeBtn = document.getElementsByClassName('close')[0];
        const messageInput = document.getElementById('messageInput');
        const chatMessages = document.getElementById('chatMessages');

        function openChat(appointmentId) {
            currentAppointmentId = appointmentId;
            modal.style.display = 'block';
            loadMessages();
        }

        closeBtn.onclick = function() {
            modal.style.display = 'none';
            currentAppointmentId = null;
        }

        window.onclick = function(event) {
            if (event.target == modal) {
                modal.style.display = 'none';
                currentAppointmentId = null;
            }
        }

        async function loadMessages() {
            try {
                const response = await fetch(`/chat/${currentAppointmentId}`);
                const data = await response.json();
                
                chatMessages.innerHTML = '';
                data.messages.forEach(msg => {
                    const messageDiv = document.createElement('div');
                    messageDiv.className = `message ${msg.senderType === 'patient' ? 'sent' : 'received'}`;
                    messageDiv.textContent = msg.message;
                    chatMessages.appendChild(messageDiv);
                });
                
                chatMessages.scrollTop = chatMessages.scrollHeight;
            } catch (err) {
                console.error('Error loading messages:', err);
            }
        }

        async function sendMessage() {
            if (!messageInput.value.trim()) return;
            
            try {
                const response = await fetch('/chat/send', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        appointmentId: currentAppointmentId,
                        message: messageInput.value.trim(),
                        senderType: 'patient'
                    })
                });
                
                if (response.ok) {
                    messageInput.value = '';
                    loadMessages();
                }
            } catch (err) {
                console.error('Error sending message:', err);
            }
        }

        messageInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        // Poll for new messages every 5 seconds
        setInterval(() => {
            if (currentAppointmentId) {
                loadMessages();
            }
        }, 5000);
    </script>

</body>

</html>