<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MediQuick | Doctor Dashboard</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css">
    <link rel="shortcut icon" href="favicon.ico" type="image/x-icon">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100..900;1,100..900&display=swap');

        :root {
            --blue: #0188df;
            --black: #444d53;
            --white: #fff;
        }

        * {
            font-family: "Roboto", sans-serif;
            margin: 0;
            padding: 0;
            text-decoration: none;
            outline: none;
            box-sizing: border-box;
            transition: all linear 0.2s;
        }

        html {
            font-size: 62.5%;
            overflow-x: hidden;
            scroll-behavior: smooth;
        }

        h3 {
            font-size: 2rem;
        }

        .button {
            height: 3.5rem;
            width: 15rem;
            background: var(--black);
            color: var(--white);
            font-size: 1.7rem;
            text-transform: capitalize;
            border-radius: 0.5rem;
            cursor: pointer;
            margin: 1rem auto;
            border: 0.1rem solid var(--blue);
            display: block;
        }

        .button:hover {
            border: 0.1rem solid var(--blue);
            background: var(--white);
            color: var(--blue);
            letter-spacing: 0.2rem;
        }

        .right-section {
            width: 100%;
            max-width: 75rem;
            background: white;
            padding: 2rem;
            border-radius: 1rem;
            box-shadow: 0 0 1rem rgba(0, 0, 0, 0.1);
            margin: 0 auto;
        }

        .appointment-slots {
            margin-bottom: 2rem;
        }

        .date-selection {
            display: flex;
            overflow-x: auto;
            gap: 1rem;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            white-space: nowrap;
        }

        .date-selection button {
            padding: 1rem;
            border: 0.1rem solid var(--black);
            border-radius: 0.5rem;
            background: #f9f9f9;
            cursor: pointer;
            white-space: nowrap;
            flex-shrink: 0;
            font-size: 1.4rem;
        }

        .date-selection button.selected {
            background: var(--blue);
            color: var(--white);
        }

        .slots {
            margin-bottom: 2rem;
            text-align: center;
        }

        .slots h3 {
            margin-bottom: 1rem;
            font-size: 2rem;
            color: var(--black);
        }

        .slots button {
            padding: 1rem;
            border: 0.1rem solid var(--black);
            border-radius: 0.5rem;
            background: var(--white);
            cursor: pointer;
            margin: 0.5rem;
            font-size: 1.4rem;
            width: 10rem;
        }

        .slots button.selected {
            background: var(--blue);
            color: var(--white);
        }

        .slots button.booked {
            background: #ccc;
            color: #666;
            cursor: not-allowed;
            border: 1px solid #999;
        }

        .heading {
            text-align: center;
            font-size: 3rem;
            padding: 1rem;
            padding-top: 8rem;
            color: var(--black);
            letter-spacing: 0.1rem;
        }

        header {
            width: 96%;
            background: var(--white);
            position: fixed;
            top: 2rem;
            left: 50%;
            transform: translate(-50%);
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1rem 2rem;
            z-index: 1000;
            box-shadow: 0 0.1rem 0.3rem rgba(0, 0, 0, 0.1);
        }

        header a {
            color: var(--black);
        }

        header a:hover {
            color: var(--blue);
        }

        header .logo {
            font-size: 3rem;
        }

        header .logo span {
            color: var(--blue);
        }

        header .navbar ul {
            display: flex;
            align-items: center;
            justify-content: space-between;
            list-style: none;
        }

        header .navbar ul li {
            margin: 0 1rem;
        }

        header .navbar ul li a {
            font-size: 2rem;
            color: var(--black);
        }

        header .navbar ul li a:hover {
            color: var(--blue);
        }

        header .fa-bars {
            font-size: 3rem;
            color: var(--blue);
            cursor: pointer;
            display: none;
        }

        .header-active {
            top: 0;
            width: 100%;
            box-shadow: 0.1rem 0.3rem rgba(0, 0, 0, 0.3);
        }

        .about {
            background: var(--white);
            padding: 4rem 0;
        }

        .about .box-container {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 2rem;
            padding: 2rem;
        }

        .about .box-container .box {
            background: var(--white);
            border-radius: 0.5rem;
            box-shadow: 0 0.3rem 0.5rem rgba(0, 0, 0, 0.3);
            padding: 2rem;
            width: 30rem;
            text-align: center;
        }

        .about .box-container .box h3 {
            color: var(--blue);
            margin-bottom: 1rem;
        }

        .about .box-container .box p {
            font-size: 1.5rem;
            color: var(--black);
            margin: 0.5rem 0;
        }

        .chart-container {
            width: 100%;
            max-width: 600px;
            margin: 0 auto;
            padding: 1rem;
            background: var(--white);
            border-radius: 0.5rem;
            box-shadow: 0 0.3rem 0.5rem rgba(0, 0, 0, 0.1);
        }

        .chart-container canvas {
            width: 100% !important;
            height: auto !important;
            max-height: 300px;
        }

        .close-btn {
            position: absolute;
            top: 12.5%;
            left: 2%;
            font-size: 24px;
            font-weight: bold;
            cursor: pointer;
            background: rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            padding: 5px 10px;
            transition: 0.3s;
        }

        .close-btn:hover {
            background: rgba(0, 0, 0, 0.3);
            color: white;
        }

        .footer {
            background: var(--black);
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            padding: 2rem 0;
        }

        .footer .box {
            width: 30rem;
            margin: 2rem;
            text-align: center;
        }

        .footer .box .logo {
            padding: 2rem 0;
            font-size: 3rem;
            color: var(--white);
        }

        .footer .box .logo span {
            color: var(--blue);
        }

        .footer .box p {
            font-size: 1.5rem;
            color: var(--white);
        }

        .footer .box a {
            color: var(--white);
            font-size: 2rem;
            display: block;
            padding: 0.2rem 0;
        }

        .footer .box a:hover {
            text-decoration: underline;
        }

        .footer .credit {
            width: 85%;
            padding-top: 1rem;
            font-size: 2rem;
            color: var(--white);
            text-align: center;
            border-top: 0.2rem solid var(--white);
        }

        .footer .credit span {
            color: var(--blue);
            text-decoration: underline;
            letter-spacing: 0.5rem;
        }

        /* Table container styling */
        .table-container {
            width: 100%;
            max-width: 75rem;
            /* Align with right-section max-width */
            margin: 2rem auto;
            /* Consistent margin with other sections */
            padding: 2rem;
            /* Match padding with right-section */
            background: var(--white);
            border-radius: 1rem;
            /* Match border-radius with other containers */
            box-shadow: 0 0 1rem rgba(0, 0, 0, 0.1);
            /* Consistent shadow */
            overflow-x: auto;
            /* Retain scroll for small screens */
        }

        /* Table styling */
        #financeTable {
            width: 100%;
            border-collapse: collapse;
            font-size: 1.4rem;
            /* Align font size with other elements (e.g., buttons) */
            color: var(--black);
            /* Use page's black variable */
            font-family: "Roboto", sans-serif;
            /* Ensure consistent font */
        }

        /* Table header styling */
        #financeTable thead th {
            background-color: var(--blue);
            /* Use page's blue variable */
            color: var(--white);
            /* Use page's white variable */
            padding: 1rem 1.5rem;
            /* Consistent padding with other elements */
            text-align: left;
            font-weight: 600;
            text-transform: uppercase;
            font-size: 1.2rem;
            /* Slightly smaller for headers, consistent with design */
            letter-spacing: 0.1rem;
            /* Match heading letter-spacing */
        }

        /* Table body styling */
        #financeTable tbody td {
            padding: 1rem 1.5rem;
            /* Consistent padding */
            border-bottom: 0.1rem solid #e0e0e0;
            /* Retain subtle border */
            vertical-align: middle;
            color: var(--black);
        }

        /* Table row hover effect */
        #financeTable tbody tr:hover {
            background-color: #f9f9f9;
            /* Match background color used in date-selection */
        }

        /* Loading, empty, and error message styling */
        #financeTable .loading,
        #financeTable .empty,
        #financeTable .error {
            text-align: center;
            padding: 2rem;
            font-style: italic;
            color: #666;
            font-size: 1.4rem;
        }

        /* Table footer styling */
        #financeTable tfoot {
            background-color: var(--white);
            font-weight: 600;
            /* Slightly bolder for totals */
        }

        /* Table footer cells */
        #financeTable tfoot td {
            padding: 1rem 1.5rem;
            border-top: 0.2rem solid var(--blue);
            /* Use blue for emphasis */
            color: var(--black);
        }

        /* Currency values styling */
        #financeTable td:nth-child(4),
        #financeTable td:nth-child(5),
        #financeTable tfoot td:nth-child(2),
        #financeTable tfoot td:nth-child(3) {
            text-align: right;
            font-family: "Roboto", sans-serif;
            /* Use Roboto instead of Courier New for consistency */
            font-weight: 500;
        }

        /* Status styling */
        #financeTable td:nth-child(6) {
            text-transform: capitalize;
            color: var(--blue);
            /* Use page's blue for consistency */
            font-weight: 500;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .table-container {
                padding: 1rem;
                /* Reduced padding for smaller screens */
            }

            #financeTable thead th,
            #financeTable tbody td,
            #financeTable tfoot td {
                padding: 0.8rem 1rem;
                /* Adjust padding for smaller screens */
                font-size: 1.2rem;
                /* Slightly smaller font for mobile */
            }
        }

        /* Loading state animation */
        @keyframes pulse {
            0% {
                opacity: 0.6;
            }

            50% {
                opacity: 1;
            }

            100% {
                opacity: 0.6;
            }
        }

        #financeTable .loading {
            animation: pulse 1.5s infinite;
        }

        @media (max-width: 768px) {
            html {
                font-size: 55%;
            }

            header .fa-bars {
                display: block;
            }

            header .navbar {
                position: fixed;
                top: -100rem;
                left: 0;
                width: 100%;
                background: var(--white);
                opacity: 0;
            }

            header .navbar ul {
                flex-flow: column;
                padding: 2rem 0;
            }

            header .navbar ul li {
                margin: 1rem 0;
                width: 100%;
                text-align: center;
            }

            header .navbar ul li a {
                font-size: 2rem;
                display: block;
            }

            header .nav-toggle {
                top: 5.5rem;
                opacity: 1;
            }

            .about .box-container .box {
                width: 90%;
            }

            .chart-container {
                max-width: 100%;
            }
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.4);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 600px;
            border-radius: 8px;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover {
            color: black;
        }

        .chat-messages {
            height: 300px;
            overflow-y: auto;
            border: 1px solid #ddd;
            padding: 10px;
            margin: 10px 0;
            border-radius: 4px;
        }

        .chat-input {
            display: flex;
            gap: 10px;
        }

        .chat-input input {
            flex: 1;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .chat-input button {
            padding: 8px 16px;
            background-color: var(--blue);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .chat-btn {
            background-color: var(--blue);
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
            margin-left: 5px;
        }

        .message {
            margin: 5px 0;
            padding: 8px;
            border-radius: 4px;
            max-width: 80%;
        }

        .message.sent {
            background-color: var(--blue);
            color: white;
            margin-left: auto;
        }

        .message.received {
            background-color: #f0f0f0;
            margin-right: auto;
        }
    </style>
</head>

<body>
    <header>
        <a href="#" class="logo"><span>M</span>edi<span>Q</span>uick</a>
        <nav class="navbar">
            <ul>
                <li><a href="#upcoming">Upcoming Appointments</a></li>
                <li><a href="#previous">Previous Appointments</a></li>
                <li><a href="/doctor/generate-prescriptions">Generate Prescriptions</a></li>
                <li><a href="/doctor/prescriptions">See Prescriptions</a></li>
                <li><a href="#slot">Slot Management</a></li>
                <li><a href="#finance">Finance</a></li>
                <li><a href="/doctor/profile"><img src="https://static.thenounproject.com/png/638636-200.png"
                            alt="Profile Image" height="30px" width="30px"></a></li>
            </ul>
        </nav>
        <div class="fas fa-bars"></div>
    </header>

    <section id="upcoming" class="about">
        <div class="close-btn" onclick="closeProfile()">
            <i class="fas fa-times"></i>
        </div>
        <h1 class="heading">Upcoming Appointments</h1><br>
        <div class="box-container" id="upcoming-appointments">
            <!-- Appointments will be loaded here -->
        </div>
    </section>

    <section id="previous" class="about">
        <h1 class="heading">Previous Appointments</h1><br>
        <div class="box-container" id="previous-appointments">
            <!-- Appointments will be loaded here -->
        </div>
    </section>

    <section class="about" id="slot">
        <h1 class="heading">Slot Management</h1><br>
        <div class="right-section">
            <div class="appointment-slots">
                <div class="date-selection" id="date-buttons"></div>
                <div class="slots" id="morning-slots">
                    <h3>Morning Slots</h3>
                </div>
                <div class="slots" id="afternoon-slots">
                    <h3>Afternoon Slots</h3>
                </div>
                <div class="slots" id="evening-slots">
                    <h3>Evening Slots</h3>
                </div>
                <button class="button" id="block-btn">Block Selected Slot</button>
            </div>
        </div>
    </section>

    <section id="finance" class="about">
        <h1 class="heading">Finance</h1><br>
        <div class="table-container">
            <table id="financeTable">
                <thead>
                    <tr>
                        <th>Patient</th>
                        <th>Date</th>
                        <th>Time</th>
                        <th>Fee</th>
                        <th>Revenue (90%)</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody id="financeBody">
                    <tr>
                        <td colspan="6" class="loading">Loading data...</td>
                    </tr>
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="3">Total</td>
                        <td id="totalFees">$0.00</td>
                        <td id="totalRevenue">$0.00</td>
                        <td id="totalAppointments">0</td>
                    </tr>
                </tfoot>
            </table>
        </div>
    </section>

    <div id="chatModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Chat with Patient</h2>
            <div id="chatMessages" class="chat-messages"></div>
            <div class="chat-input">
                <input type="text" id="messageInput" placeholder="Type your message...">
                <button onclick="sendMessage()">Send</button>
            </div>
        </div>
    </div>

    <%- include('partials/footer') %>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

        <script>
            document.addEventListener("DOMContentLoaded", function () {
                // Load appointments when page loads
                loadAppointments();

                // Initialize slot management
                initSlotManagement();

                // Load finance data
                loadFinanceData();
            });

            async function loadAppointments() {
                try {
                    // Load all appointments in one request
                    const response = await fetch('/doctor/appointments');
                    const { upcoming, previous } = await response.json();

                    renderAppointments(upcoming, 'upcoming-appointments');
                    renderAppointments(previous, 'previous-appointments');

                } catch (error) {
                    console.error('Error loading appointments:', error);
                    alert('Failed to load appointments. Please refresh the page.');
                }
            }

            function renderAppointments(appointments, containerId) {
                const container = document.getElementById(containerId);
                container.innerHTML = '';

                if (appointments.length === 0) {
                    container.innerHTML = '<p>No appointments found</p>';
                    return;
                }

                appointments.forEach(appt => {
                    const box = document.createElement('div');
                    box.className = 'box';

                    const patientName = appt.patientId?.name || 'Unknown Patient';
                    const apptDate = new Date(appt.date).toLocaleDateString();
                    const status = appt.status.charAt(0).toUpperCase() + appt.status.slice(1);

                    box.innerHTML = `
                    <h3>${patientName}</h3>
                    <p><strong>Date:</strong> ${apptDate}</p>
                    <p><strong>Time:</strong> ${appt.time}</p>
                    <p><strong>Status:</strong> ${status}</p>
                    <div class="action-buttons">
                        ${appt.status === 'pending' ?
                            `<button onclick="updateAppointment('${appt._id}', 'confirmed')">Confirm</button>
                             <button onclick="updateAppointment('${appt._id}', 'cancelled')">Cancel</button>` : ''}
                        ${appt.status === 'confirmed' ?
                            `<button onclick="updateAppointment('${appt._id}', 'completed')">Mark Complete</button>
                            <button onclick="openChat('${appt._id}')" class="chat-btn">Chat with Patient</button>` : ''}
                    </div>
                `;
                    container.appendChild(box);
                });
            }

            async function loadFinanceData() {
                try {
                    const response = await fetch('/doctor/appointments');
                    const { upcoming, previous } = await response.json();

                    // Combine all completed appointments
                    const completedAppointments = [...upcoming, ...previous].filter(
                        appt => appt.status === 'completed'
                    );

                    const tbody = document.getElementById('financeBody');
                    tbody.innerHTML = '';

                    if (completedAppointments.length === 0) {
                        tbody.innerHTML = '<tr><td colspan="6">No completed appointments found</td></tr>';
                        return;
                    }

                    let totalFees = 0;
                    let totalRevenue = 0;

                    completedAppointments.forEach(appt => {
                        const row = document.createElement('tr');
                        const patientName = appt.patientId?.name || 'Unknown Patient';
                        const apptDate = new Date(appt.date).toLocaleDateString();
                        const fee = appt.consultationFee || 0;
                        const revenue = fee * 0.9; // 90% of fee

                        totalFees += fee;
                        totalRevenue += revenue;

                        row.innerHTML = `
                        <td>${patientName}</td>
                        <td>${apptDate}</td>
                        <td>${appt.time}</td>
                        <td>$${fee.toFixed(2)}</td>
                        <td>$${revenue.toFixed(2)}</td>
                        <td>Completed</td>
                    `;
                        tbody.appendChild(row);
                    });

                    // Update totals
                    document.getElementById('totalFees').textContent = `$${totalFees.toFixed(2)}`;
                    document.getElementById('totalRevenue').textContent = `$${totalRevenue.toFixed(2)}`;
                    document.getElementById('totalAppointments').textContent = completedAppointments.length;

                } catch (error) {
                    console.error('Error loading finance data:', error);
                    document.getElementById('financeBody').innerHTML =
                        '<tr><td colspan="6">Error loading finance data</td></tr>';
                }
            }

            async function updateAppointment(appointmentId, status) {
                try {
                    const response = await fetch(`/appointment/${appointmentId}`, {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ status })
                    });

                    const result = await response.json();
                    console.log('Appointment update result:', result);

                    if (response.ok) {
                        alert(`Appointment ${status} successfully`);
                        loadAppointments(); // Refresh the appointments list
                        loadFinanceData(); // Refresh finance data
                    } else {
                        alert(result.error || 'Failed to update appointment');
                    }
                } catch (error) {
                    console.error('Error updating appointment:', error);
                    alert('Failed to update appointment. Please try again.');
                }
            }

            function initSlotManagement() {
                const dateContainer = document.getElementById("date-buttons");
                const today = new Date();

                // Generate date buttons for next 14 days
                for (let i = 0; i < 14; i++) {
                    let date = new Date();
                    date.setDate(today.getDate() + i);
                    let button = document.createElement("button");
                    button.textContent = `${date.toLocaleString('en-US', { weekday: 'short' })} ${date.getDate()}`;
                    button.value = date.toISOString().split("T")[0];
                    button.addEventListener("click", function () {
                        document.querySelectorAll(".date-selection button").forEach(btn => btn.classList.remove("selected"));
                        this.classList.add("selected");
                        updateSlots(date);
                    });
                    dateContainer.appendChild(button);
                }

                const allSlots = {
                    morning: ["09:00 AM", "09:15 AM", "09:30 AM", "09:45 AM", "10:00 AM", "10:15 AM", "10:30 AM", "10:45 AM", "11:00 AM", "11:15 AM", "11:30 AM"],
                    afternoon: ["02:00 PM", "02:15 PM", "02:30 PM", "02:45 PM", "03:00 PM", "03:15 PM", "03:30 PM", "03:45 PM"],
                    evening: ["06:00 PM", "06:15 PM", "06:30 PM", "06:45 PM", "07:00 PM", "07:15 PM", "07:30 PM", "07:45 PM"]
                };

                async function updateSlots(selectedDate) {
                    const now = new Date();
                    const isToday = selectedDate.toDateString() === now.toDateString();
                    const dateStr = selectedDate.toISOString().split("T")[0];

                    try {
                        // Get the doctor ID from the server-side rendered data
                        const doctorId = '<%= doctor._id %>';

                        // Fetch already booked slots for this doctor on this date
                        const response = await fetch(`/appointment/api/booked-slots?doctorId=${doctorId}&date=${dateStr}`);
                        const bookedSlots = await response.json();
                        console.log('Booked slots:', bookedSlots);

                        function filterSlots(slots) {
                            return slots.filter(slot => {
                                // Check if slot is booked
                                if (bookedSlots.includes(slot)) {
                                    console.log(`Slot ${slot} is already booked`);
                                    return false;
                                }

                                // If today, check if slot is in past
                                if (isToday) {
                                    const [time, period] = slot.split(' ');
                                    let [hours, minutes] = time.split(':').map(Number);

                                    // Convert to 24-hour format
                                    if (period === 'PM' && hours !== 12) hours += 12;
                                    if (period === 'AM' && hours === 12) hours = 0;

                                    const slotTime = new Date(selectedDate);
                                    slotTime.setHours(hours, minutes, 0, 0);

                                    return slotTime > now;
                                }
                                return true;
                            });
                        }

                        function renderSlots(slots, containerId) {
                            const container = document.getElementById(containerId);
                            container.innerHTML = `<h3>${containerId.split('-')[0].toUpperCase()} SLOTS</h3>`;
                            const filteredSlots = filterSlots(slots);

                            if (filteredSlots.length > 0) {
                                filteredSlots.forEach(slot => {
                                    const button = document.createElement("button");
                                    button.textContent = slot;
                                    button.addEventListener("click", function () {
                                        document.querySelectorAll(".slots button").forEach(btn => {
                                            btn.classList.remove("selected");
                                            btn.style.backgroundColor = '';
                                        });
                                        this.classList.add("selected");
                                        this.style.backgroundColor = '#f0f0f0';
                                    });
                                    container.appendChild(button);
                                });
                            } else {
                                container.innerHTML += `<p>No slots available</p>`;
                            }
                        }

                        renderSlots(allSlots.morning, "morning-slots");
                        renderSlots(allSlots.afternoon, "afternoon-slots");
                        renderSlots(allSlots.evening, "evening-slots");
                    } catch (error) {
                        console.error("Error fetching booked slots:", error);
                        // Fall back to showing all slots if API fails
                        renderSlots(allSlots.morning, "morning-slots");
                        renderSlots(allSlots.afternoon, "afternoon-slots");
                        renderSlots(allSlots.evening, "evening-slots");
                    }
                }

                document.getElementById('block-btn').addEventListener('click', async function () {
                    const selectedDate = document.querySelector(".date-selection button.selected");
                    const selectedTime = document.querySelector(".slots button.selected");

                    if (selectedDate && selectedTime) {
                        if (confirm(`Are you sure you want to block the slot on ${selectedDate.textContent} at ${selectedTime.textContent}?`)) {
                            try {
                                const response = await fetch('/appointment/api/block-slot', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        date: selectedDate.value,
                                        time: selectedTime.textContent
                                    })
                                });

                                const result = await response.json();

                                if (response.ok) {
                                    selectedTime.disabled = true;
                                    selectedTime.style.backgroundColor = '#ffcccc';
                                    selectedTime.textContent += ' (Blocked)';
                                    alert('Slot blocked successfully');
                                } else {
                                    alert(result.error || 'Failed to block slot');
                                }
                            } catch (error) {
                                console.error('Error blocking slot:', error);
                                alert('Failed to block slot. Please try again.');
                            }
                        }
                    } else {
                        alert('Please select both a date and time slot');
                    }
                });

                // Initialize slots for today
                updateSlots(today);
                if (dateContainer.firstChild) {
                    dateContainer.firstChild.classList.add("selected");
                }
            }

            $(document).ready(function () {
                $('.fa-bars').click(function () {
                    $(this).toggleClass('fa-times');
                    $('.navbar').toggleClass('nav-toggle');
                });

                $(window).on('scroll load', function () {
                    $(this).removeClass('fa-times');
                    $('.navbar').removeClass('nav-toggle');
                    if ($(window).scrollTop() > 30) {
                        $('header').addClass('header-active');
                    } else {
                        $('header').removeClass('header-active');
                    }
                });
            });

            function closeProfile() {
                window.location.href = "/doctor/dashboard";
            }

            let currentAppointmentId = null;
            const chatModal = document.getElementById('chatModal');
            const messageInput = document.getElementById('messageInput');
            const chatMessages = document.getElementById('chatMessages');
            const closeBtn = document.querySelector('.close');

            function openChat(appointmentId) {
                currentAppointmentId = appointmentId;
                chatModal.style.display = 'block';
                loadMessages();

                // Start polling for new messages
                startMessagePolling();
            }

            closeBtn.onclick = function () {
                chatModal.style.display = 'none';
                currentAppointmentId = null;
                // Stop polling when chat is closed
                stopMessagePolling();
            }

            window.onclick = function (event) {
                if (event.target == chatModal) {
                    chatModal.style.display = 'none';
                    currentAppointmentId = null;
                    // Stop polling when chat is closed
                    stopMessagePolling();
                }
            }

            async function loadMessages() {
                try {
                    const response = await fetch(`/chat/${currentAppointmentId}`);
                    const data = await response.json();

                    chatMessages.innerHTML = '';
                    data.messages.forEach(msg => {
                        const messageDiv = document.createElement('div');
                        messageDiv.className = `message ${msg.senderType === 'doctor' ? 'sent' : 'received'}`;
                        messageDiv.textContent = msg.message;
                        chatMessages.appendChild(messageDiv);
                    });

                    // Scroll to bottom
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                } catch (error) {
                    console.error('Error loading messages:', error);
                }
            }

            async function sendMessage() {
                const message = messageInput.value.trim();
                if (!message) return;

                try {
                    const response = await fetch('/chat/send', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            appointmentId: currentAppointmentId,
                            message,
                            senderType: 'doctor'
                        })
                    });

                    if (response.ok) {
                        messageInput.value = '';
                        loadMessages();
                    } else {
                        const error = await response.json();
                        alert(error.error || 'Failed to send message');
                    }
                } catch (error) {
                    console.error('Error sending message:', error);
                    alert('Failed to send message');
                }
            }

            // Handle Enter key in message input
            messageInput.addEventListener('keypress', function (e) {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });

            let messagePollingInterval;

            function startMessagePolling() {
                // Poll every 5 seconds
                messagePollingInterval = setInterval(loadMessages, 5000);
            }

            function stopMessagePolling() {
                if (messagePollingInterval) {
                    clearInterval(messagePollingInterval);
                }
            }
        </script>
</body>

</html>